h1. Performance Invariants

This library implements a Java agent and a couple of annotations to declare performance invariants in Java code.
The implementation is currently incomplete (and very primitive).

For more details on the ideas behind it see: "http://www.codng.com/2011/02/performance-invariants.html":http://www.codng.com/2011/02/performance-invariants.html

h2. Compiling

After you checkout the source code, all you have to do is:
<pre>~/performance>mvn package
</pre>

h2. Running the agent

You just need to add the agent and jar to the JVM:
<pre>java -javaagent:$HOME/performance/target/performance-1.0-SNAPSHOT-jar-with-dependencies.jar \ 
     -Xbootclasspath/a:$HOME/performance/target/performance-1.0-SNAPSHOT-jar-with-dependencies.jar -cp [classpath] MainClass
</pre>
Since it can impact performance, the agent is not automatically installed if it's just included on the classpath, I might change this afterwards.

h2. Annotating Methods

<pre>
import performance.annotations.Expect;

public class Test
{
    static void bah(){}

    @Expect("bah < 10")
    static void foo(){
        for(int i = 0; i < 100; i++) {
            bah();
        }   
    }
    
    public static void main(String[] args) {
        foo();
    }
}
</pre>

After compiling it, you can run it with:
<pre>java -javaagent:$HOME/performance/target/performance-1.0-SNAPSHOT-jar-with-dependencies.jar \ 
     -Xbootclasspath/a:$HOME/performance/target/performance-1.0-SNAPSHOT-jar-with-dependencies.jar Test
</pre>
It should produce output similar to the following:
<pre>Exception in thread "main" java.lang.AssertionError: Method 'Test.foo' did not fulfil: bah < 10
[#<any>.bah=100]
            at performance.runtime.PerformanceExpectation.validate(PerformanceExpectation.java:58)
            at performance.runtime.ThreadHelper.endExpectation(ThreadHelper.java:49)
            at performance.runtime.Helper.endExpectation(Helper.java:57)
            at Test.foo(Test.java:20)
            at Test.main(Test.java:25)
</pre>

h2. Expectation Syntax

The expression used to declare expectations consists of:
* logical operators: <code>&&</code>, <code>||</code>
* relational operators: <code>&lt;</code>, <code>&gt;</code>, <code>&le;</code>, <code>&ge;</code>,
* arithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>,
* unary operators: <code>-</code>, <code>!</code>
* Method matchers
* Dynamic values

h3. Method matchers

Simple identifiers are treated as method names. If they are qualified, the one to the left o the dot refers to a simple classname (as returned by <code>Class.getSimpleClassName()</code>).

h3. Dynamic values

Expressions of the form ${a.b.c.d} refer to arguments, instance variables or static variables.
For example: 
* <code>*${static.CONSTANT}</code> refers to a variable named CONSTANT in the current class.
* <code>${this.instance}</code> refers to a variable named 'instance' in the current object (only valid for instance methods).
* <code>${n}</code> refers to an argument named 'n'
* <code>${3}</code> refers to the fourth argument from the left (zero based indexing)
All dynamic values *MUST* yield a numeric value, otherwise a failure will be reported.

h2. License

Licensed under the Apache License, Version 2.0 (the "License");
You may obtain a copy of the License at: "http://www.apache.org/licenses/LICENSE-2.0":http://www.apache.org/licenses/LICENSE-2.0
